#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parachute.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SandBox")]
	public partial class ParachuteModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertParachuteAppliedScriptsLog(ParachuteAppliedScriptsLog instance);
    partial void UpdateParachuteAppliedScriptsLog(ParachuteAppliedScriptsLog instance);
    partial void DeleteParachuteAppliedScriptsLog(ParachuteAppliedScriptsLog instance);
    partial void InsertParachuteSchemaChangeLog(ParachuteSchemaChangeLog instance);
    partial void UpdateParachuteSchemaChangeLog(ParachuteSchemaChangeLog instance);
    partial void DeleteParachuteSchemaChangeLog(ParachuteSchemaChangeLog instance);
    #endregion
		
		public ParachuteModelDataContext() : 
				base(global::Parachute.Properties.Settings.Default.SandBoxConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ParachuteModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParachuteModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParachuteModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ParachuteModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ParachuteAppliedScriptsLog> ParachuteAppliedScriptsLogs
		{
			get
			{
				return this.GetTable<ParachuteAppliedScriptsLog>();
			}
		}
		
		public System.Data.Linq.Table<ParachuteSchemaChangeLog> ParachuteSchemaChangeLogs
		{
			get
			{
				return this.GetTable<ParachuteSchemaChangeLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[__ParachuteAppliedScriptsLogs]")]
	public partial class ParachuteAppliedScriptsLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParachuteAppliedScriptsLogId;
		
		private string _ScriptName;
		
		private string _Hash;
		
		private string _SchemaVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParachuteAppliedScriptsLogIdChanging(int value);
    partial void OnParachuteAppliedScriptsLogIdChanged();
    partial void OnScriptNameChanging(string value);
    partial void OnScriptNameChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnSchemaVersionChanging(string value);
    partial void OnSchemaVersionChanged();
    #endregion
		
		public ParachuteAppliedScriptsLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParachuteAppliedScriptsLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParachuteAppliedScriptsLogId
		{
			get
			{
				return this._ParachuteAppliedScriptsLogId;
			}
			set
			{
				if ((this._ParachuteAppliedScriptsLogId != value))
				{
					this.OnParachuteAppliedScriptsLogIdChanging(value);
					this.SendPropertyChanging();
					this._ParachuteAppliedScriptsLogId = value;
					this.SendPropertyChanged("ParachuteAppliedScriptsLogId");
					this.OnParachuteAppliedScriptsLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScriptName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ScriptName
		{
			get
			{
				return this._ScriptName;
			}
			set
			{
				if ((this._ScriptName != value))
				{
					this.OnScriptNameChanging(value);
					this.SendPropertyChanging();
					this._ScriptName = value;
					this.SendPropertyChanged("ScriptName");
					this.OnScriptNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaVersion", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string SchemaVersion
		{
			get
			{
				return this._SchemaVersion;
			}
			set
			{
				if ((this._SchemaVersion != value))
				{
					this.OnSchemaVersionChanging(value);
					this.SendPropertyChanging();
					this._SchemaVersion = value;
					this.SendPropertyChanged("SchemaVersion");
					this.OnSchemaVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[__ParachuteSchemaChangeLogs]")]
	public partial class ParachuteSchemaChangeLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParachuteSchemaChangeLogId;
		
		private string _MajorReleaseNumber;
		
		private string _MinorReleaseNumber;
		
		private string _PointReleaseNumber;
		
		private string _ScriptName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParachuteSchemaChangeLogIdChanging(int value);
    partial void OnParachuteSchemaChangeLogIdChanged();
    partial void OnMajorReleaseNumberChanging(string value);
    partial void OnMajorReleaseNumberChanged();
    partial void OnMinorReleaseNumberChanging(string value);
    partial void OnMinorReleaseNumberChanged();
    partial void OnPointReleaseNumberChanging(string value);
    partial void OnPointReleaseNumberChanged();
    partial void OnScriptNameChanging(string value);
    partial void OnScriptNameChanged();
    #endregion
		
		public ParachuteSchemaChangeLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParachuteSchemaChangeLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParachuteSchemaChangeLogId
		{
			get
			{
				return this._ParachuteSchemaChangeLogId;
			}
			set
			{
				if ((this._ParachuteSchemaChangeLogId != value))
				{
					this.OnParachuteSchemaChangeLogIdChanging(value);
					this.SendPropertyChanging();
					this._ParachuteSchemaChangeLogId = value;
					this.SendPropertyChanged("ParachuteSchemaChangeLogId");
					this.OnParachuteSchemaChangeLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorReleaseNumber", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string MajorReleaseNumber
		{
			get
			{
				return this._MajorReleaseNumber;
			}
			set
			{
				if ((this._MajorReleaseNumber != value))
				{
					this.OnMajorReleaseNumberChanging(value);
					this.SendPropertyChanging();
					this._MajorReleaseNumber = value;
					this.SendPropertyChanged("MajorReleaseNumber");
					this.OnMajorReleaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinorReleaseNumber", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string MinorReleaseNumber
		{
			get
			{
				return this._MinorReleaseNumber;
			}
			set
			{
				if ((this._MinorReleaseNumber != value))
				{
					this.OnMinorReleaseNumberChanging(value);
					this.SendPropertyChanging();
					this._MinorReleaseNumber = value;
					this.SendPropertyChanged("MinorReleaseNumber");
					this.OnMinorReleaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointReleaseNumber", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string PointReleaseNumber
		{
			get
			{
				return this._PointReleaseNumber;
			}
			set
			{
				if ((this._PointReleaseNumber != value))
				{
					this.OnPointReleaseNumberChanging(value);
					this.SendPropertyChanging();
					this._PointReleaseNumber = value;
					this.SendPropertyChanged("PointReleaseNumber");
					this.OnPointReleaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScriptName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ScriptName
		{
			get
			{
				return this._ScriptName;
			}
			set
			{
				if ((this._ScriptName != value))
				{
					this.OnScriptNameChanging(value);
					this.SendPropertyChanging();
					this._ScriptName = value;
					this.SendPropertyChanged("ScriptName");
					this.OnScriptNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parachute.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Parachute {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Parachute() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Parachute.Resources.Parachute", typeof(Parachute).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (
        ///	SELECT	* 
        ///	FROM	INFORMATION_SCHEMA.TABLES 
        ///	WHERE	TABLE_NAME = &apos;__ParachuteChangeLog&apos;
        ///	AND		TABLE_SCHEMA = &apos;dbo&apos;)
        ///BEGIN
        ///	PRINT &apos;Creating Table [dbo].[__ParachuteChangeLog]&apos;
        ///	CREATE TABLE [dbo].[__ParachuteChangeLog]
        ///	(
        ///		[ParachuteChangeLogId] [int] IDENTITY(1,1) NOT NULL,
        ///		[MajorReleaseNumber] [varchar](2) NOT NULL,
        ///		[MinorReleaseNumber] [varchar](2) NOT NULL,
        ///		[PointReleaseNumber] [varchar](4) NOT NULL,
        ///		[ScriptName] [nvarchar](200) NOT NULL,
        ///		[DateApplied] [datetime] N [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChangeLogCreationScript {
            get {
                return ResourceManager.GetString("ChangeLogCreationScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parachute
        ///A SQL Server Schema Deployment Tool.
        ///
        ///Usage
        /// parachute.exe [options]
        ///
        ///Switches
        /// Connectivity
        ///  -s, --server [SERVER]     The SQL Server Instance to connect
        ///  -d, --database [CATALOG]  The SQL Server Database to apply scripts to
        ///  -u, --username [USER]     The Username to connect as when applying scripts
        ///  -p, --password [PASS]     The Password to connect with when applying scripts
        ///
        ///  -c, --conn [CONN STRING]  The connection string to connect to the database.
        ///                          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FullUsage {
            get {
                return ResourceManager.GetString("FullUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parachute
        ///A SQL Server Schema Deployment Tool.
        ///For more options:    parachute.exe --help.
        /// </summary>
        internal static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parachute
        ///A SQL Server Schema Deployment Tool.
        ///Version:          $VERSION$
        ///File Version:     $FILEVERSION$
        ///Product Version:  $PRODUCTVERSION$.
        /// </summary>
        internal static string VersionInfo {
            get {
                return ResourceManager.GetString("VersionInfo", resourceCulture);
            }
        }
    }
}
